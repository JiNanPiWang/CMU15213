#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# 循环展开，比如100%3，先计算计算主循环次数（100/3=33次），再计算剩余数据量（100%3=1）
# 比如r8存主循环次数，r9存剩余数据量
# 总数先-3，到时候小于0了再说
# count可以分开算，没有数据冒险
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done			# if so, goto Done:

Normal_Loop0:
	iaddq 0xfffffffffffffffc, %rdx		# len-=4
	andq %rdx, %rdx						# 如果len<=0
	jle Last_Loop		
	iaddq 4, %rdx						# len+=4
	mrmovq (%rdi), %r10					# read val from src...
	mrmovq 8(%rdi), %r11				# read val from src...
	mrmovq 16(%rdi), %r12				# read val from src...
	mrmovq 24(%rdi), %r13				# read val from src...
	andq %r10, %r10						# val <= 0?
	jle Normal_Loop1					# if so, goto Npos:
	iaddq 1, %rax						# count++
Normal_Loop1:
	andq %r11, %r11						# val <= 0?
	jle Normal_Loop2					# if so, goto Npos:
	iaddq 1, %rax						# count++
Normal_Loop2:
	andq %r12, %r12						# val <= 0?
	jle Normal_Loop3					# if so, goto Npos:
	iaddq 1, %rax						# count++
Normal_Loop3:

	rmmovq %r10, (%rsi)					# ...and store it to dst
	rmmovq %r11, 8(%rsi)				# ...and store it to dst
	rmmovq %r12, 16(%rsi)				# ...and store it to dst
	rmmovq %r13, 24(%rsi)				# ...and store it to dst
	iaddq 32, %rdi						# src++
	iaddq 32, %rsi						# dst++
	iaddq 0xfffffffffffffffc, %rdx		# len-4

	andq %r13, %r13						# val <= 0?
	jle Normal_Loop0					# if so, goto Npos:
	iaddq 1, %rax						# count++
	jmp Normal_Loop0

Last_Loop:
	iaddq 0x4, %rdx						# rdx+4
Last_Loop_Content:
	mrmovq (%rdi), %r10					# read val from src...
	iaddq 8, %rdi						# src++
	rmmovq %r10, (%rsi)					# ...and store it to dst
	iaddq 8, %rsi						# dst++
	iaddq 0xffffffffffffffff, %rdx		# len--
	andq %r10, %r10						# val <= 0?
	jle Npos							# if so, goto Npos:
	iaddq 1, %rax						# count++
Npos:
	andq %rdx,%rdx						# len > 0?
	jg Last_Loop_Content	



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
